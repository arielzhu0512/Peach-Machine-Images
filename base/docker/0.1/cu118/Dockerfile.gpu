FROM nvidia/cuda:11.8.0-base-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"

RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get autoremove -y \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

ARG PYTHON=python3
ARG PYTHON_VERSION=3.9

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
ENV PATH /usr/local/bin:$PATH

ENV CUDA_HOME=/usr/local/
ENV CUDNN_VERSION=8.7.0.84
ENV NCCL_VERSION=2.16.2
ENV GDRCOPY_VERSION=2.3
ENV NVIDIA_VERSION=535

# Install python3.9
RUN apt-get -y update \
 && apt-get -y upgrade \
 && apt-get install -y \
    python${PYTHON_VERSION} \
    ${PYTHON}-pip \
    python-is-python3 \
 && apt-get clean
RUN echo 'alias python=python3.9' >> ~/.bashrc

# Install GPU related packages
RUN apt-get -y update \
 && apt-get -y upgrade \
 && apt-get install -y \
    nvidia-driver-${NVIDIA_VERSION}-server \
 && apt-get clean

# # Install Nvidia container toolkit
# RUN curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
#  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
#     sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
#     tee /etc/apt/sources.list.d/nvidia-container-toolkit.list \
#  && apt-get -y update \
#  && apt-get -y install nvidia-container-toolkit


# # Install NCCL
# RUN cd /tmp \
#  && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
#  && cd nccl \
#  && make -j64 src.build BUILDDIR=/usr/local CUDA_LIB=${CUDA_HOME}/lib \
#  && rm -rf /tmp/nccl

# # Install GDRCopy
# RUN cd /tmp \
#  && git clone https://github.com/NVIDIA/gdrcopy.git -b v${GDRCOPY_VERSION} \
#  && cd gdrcopy \
#  && sed -ie '12s@$@ -L $(CUDA)/lib/stubs@' tests/Makefile \
#  && CUDA=/usr/local make install \
#  && rm -rf /tmp/gdrcopy

WORKDIR /

# Remove the cache
RUN rm -rf /root/.cache | true

CMD ["/bin/bash"]